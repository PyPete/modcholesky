var N=null,E="",T="t",U="u",searchIndex={};
var R=["array2","arrayview1","usize","modcholesky","decomposition","result","mod_cholesky_gmw81","Computes the modified Cholesky decomposition with the…","mod_cholesky_se90","Computes the modified Cholesky decomposition with the SE90…","mod_cholesky_se99","Computes the modified Cholesky decomposition with the SE99…","Decomposition","GershgorinCircles","ModCholeskyGMW81","ModCholeskySE90","ModCholeskySE99"];

searchIndex["modcholesky"]={"doc":"Modified Cholesky decompositions","i":[[3,R[12],R[3],E,N,N],[12,"l",E,E,0,N],[12,"e",E,E,0,N],[12,"p",E,E,0,N],[0,"utils",E,"Utility functions",N,N],[5,"eigenvalues_2x2","modcholesky::utils","Computes the Eigenvalues of a 2x2 matrix",N,[[["arrayview2"]]]],[5,"swap_columns",E,"Swaps columns `idx1` and `idx2` of matrix `mat`",N,[[[R[0]],[R[2]]]]],[5,"swap_rows",E,"Swaps rows `idx1` and `idx2` of matrix `mat`",N,[[[R[0]],[R[2]]]]],[5,"index_of_largest",E,"Returns the index of the largest element in a 1D array",N,[[[R[1]]],[R[2]]]],[5,"index_of_largest_abs",E,"Returns the index of the element with the largest absolute…",N,[[[R[1]]],[R[2]]]],[5,"index_to_permutation_mat",E,"Returns the permutation matrix for a vector of permuted…",N,[[],[[R[0],["f64"]],["f64"]]]],[5,"diag_mat_from_arr",E,"Builds a diagonal matrix from a 1D slice",N,[[],[R[0]]]],[5,"random_householder",E,"Returns a random Householder matrix of dimension `dim` and…",N,[[[R[2]],["u8"]],[[R[0],["f64"]],["f64"]]]],[5,"random_diagonal",E,"Returns a random diagonal matrix with Eigenvalues…",N,[[["u8"],[R[2]]],[[R[0],["f64"]],["f64"]]]],[8,R[13],R[3],"Gershgorin circles",N,N],[10,"gershgorin_circles",E,"Computes the Gershgorin Circles of a matrix",1,[[["self"]],["vec"]]],[8,R[14],E,"Gill, Murray and Wright (1981)",N,N],[11,R[6],E,R[7],2,[[["self"]],[R[4]]]],[8,R[15],E,"Schnabel & Eskow algorithm (1990)",N,N],[11,R[8],E,R[9],3,[[["self"]],[R[4]]]],[8,R[16],E,"Schnabel & Eskow algorithm (1999)",N,N],[11,R[10],E,R[11],4,[[["self"]],[R[4]]]],[11,"new",E,E,0,[[["e"],["p"],["l"]],["self"]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"try_from",E,E,0,[[[U]],[R[5]]]],[11,"try_into",E,E,0,[[],[R[5]]]],[11,"borrow_mut",E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"vzip",E,E,0,[[],["v"]]],[11,R[6],E,R[7],2,[[["self"]],[R[4]]]],[11,R[8],E,R[9],3,[[["self"]],[R[4]]]],[11,R[10],E,R[11],4,[[["self"]],[R[4]]]]],"p":[[3,R[12]],[8,R[13]],[8,R[14]],[8,R[15]],[8,R[16]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);